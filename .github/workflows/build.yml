---
name: DevSecOps Pipeline
on:
  push:
    branches:
      - main
    paths-ignore: 
      - 'version'
      - 'README.md'

  pull_request:
    types: [opened, synchronize, reopened]

env:
  # image repo name
  REPO_NAME: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_REPO_NAME }}

jobs:
  generate-version:
    name: Version Generate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17

      - name: get new version
        id: version
        run: |
          current_version="$(cat version)"
          new_version="$(echo "$current_version" | awk -F. '{$3 = $3 + 1;} 1' OFS=".")"
          echo "$new_version" > version
          echo "VERSION=$new_version" >> "$GITHUB_OUTPUT"

    outputs:
      VERSION: ${{ steps.version.outputs.VERSION }}
  
  Dependency-Cheker:
    name: OWASP Dependency Cheker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17
      
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          
      - name: Build project with Maven
        run: |
          chmod +x mvnw
          ./mvnw clean install
        
      - name: Dependency-Check Run
        env:
          # actions/setup-java changes JAVA_HOME so it needs to be reset to match the dependency-check docker image
          JAVA_HOME: /opt/jdk
        uses: dependency-check/Dependency-Check_Action@main
        id: dependency-check
        with:
          project: 'OWASP Security Shepherd'
          path: '.'
          format: 'HTML'
          args: >
            --format JSON
            --prettyPrint
      - name: Publish Dependency-Check Results
        uses: actions/upload-artifact@master
        with:
           name: dependency_check_report
           path: ${{github.workspace}}/reports
  sonarqube-analysis:
    needs: [generate-version, Dependency-Cheker]
    name: Sonarqube Analyze
    runs-on: ubuntu-latest  
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17
      
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
      - run: chmod +x mvnw 
     
      - name: Run Tests
        run: |
          ./mvnw clean test

      - name: Run tests and generate code coverage report
        run: ./mvnw verify

      - name: Upload code coverage report
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage
          path: target/site/jacoco/index.html

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload JaCoCo Report to S3  
        run: |
          cd target/site/
          jar -cvf ${{ needs.generate-version.outputs.VERSION }}.war jacoco/
          aws s3 cp *.war s3://devsecops-project-01/jacoco-reports/

#       - name: Import Secrets
#         id: import-secrets
#         uses: hashicorp/vault-action@v2
#         with:
#           url: http://${{ secrets.SONAR_URL }}:8200/
#           token: ${{ secrets.VAULT_TOKEN }}
#           method: approle
#           roleId: ${{ secrets.VAULT_ROLEID }}
#           secretId: ${{ secrets.VAULT_SECRETID}}
#           secrets: |
#             secrets/creds/sonar sonar-token | SONAR_TOKEN;
#             secrets/creds/sonar sonar-project-key | SONAR_PROJECT_KEY;
          
      - name: SonarQube Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./mvnw -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
          
  snyk-test:
    needs: [generate-version]
    name: Snyk Test
    runs-on: ubuntu-latest  
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: snyk/actions/setup@master
      - uses: actions/setup-go@v1
        with:
          go-version: '1.13'
      - run: chmod +x mvnw
      - name: Snyk monitor
        run: snyk test
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true
        
   
  docker-build:
    needs: [generate-version, sonarqube-analysis]
    name: Docker Build and Push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17
            
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Maven Install
        run: |
          chmod +x mvnw  
          ./mvnw clean install 

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1  

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2   

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ${{ env.REPO_NAME }}:${{ needs.generate-version.outputs.VERSION }}
            ${{ env.REPO_NAME }}:latest
          cache-to: type=inline

  version-update:
    needs: [docker-build, generate-version]
    name: Push Version into Repository
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v3
      
      - name: Getting Version from previous Jobs
        run:  echo ${{ needs.generate-version.outputs.VERSION }} > version

      - uses: EndBug/add-and-commit@v7.0.0
        with:
          add: version
          message: "version updated with tag ${{ needs.generate-version.outputs.VERSION }}"
          author_name: ${{ secrets.NAME }}
          author_email: ${{ secrets.EMAIL }}
  
  Trivy :
    needs: [docker-build, generate-version]
    name: Trivy Vulnerability Scanner for Containers
    runs-on: ubuntu-latest
    steps:
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1  

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REPO_NAME }}:latest'
          format: 'table'
          vuln-type: 'os,library'
          severity: 'MEDIUM,CRITICAL,HIGH'
          output: 'trivy-results.html'

      - name: Upload Trivy Report to S3  
        run: |
          mv trivy-results.html trivy-results-${{ needs.generate-version.outputs.VERSION }}.html
          aws s3 cp trivy-results-${{ needs.generate-version.outputs.VERSION }}.html s3://devsecops-project-01/trivy/ 

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
