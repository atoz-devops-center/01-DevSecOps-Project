name: DevSecOps Pipeline
on:
  push:
    branches:
      - main
    paths-ignore: 
      - 'version'

  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17
      - name: Run Tests
        run: |
          mvn clean install
          mvn test 

      - name: Run tests and generate code coverage report
        run: mvn verify

      - name: Upload code coverage report
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage
          path: target/site/jacoco/index.html

      - name: SonarQube Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
      
      - name: SonarQube Quality Gate check
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner
          if [ "$(curl --silent --request GET --header 'Content-Type: application/json' org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} | jq -r '.projectStatus.status')" != "OK" ]; then
            echo "Quality Gate failed"
            exit 1
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update version file
        id: version
        run: |
          current_version=$(cat version)
          new_version=$(echo $current_version | awk -F. '{$3 = $3 + 1;} 1' OFS=".")
          echo $new_version > version
          echo "VERSION=$new_version" >> $GITHUB_OUTPUT

      - name: Upload JaCoCo Report to S3  
        run: |
          mv target/site/jacoco/index.html target/site/jacoco/${{ steps.version.outputs.VERSION }}.html
          aws s3 cp target/site/jacoco/${{ steps.version.outputs.VERSION }}.html s3://devsecops-project-01/jacoco-reports/   

      - name: Import Secrets
        id: import-secrets
        uses: hashicorp/vault-action@v2
        with:
          url: http://13.233.72.146:8200/
          token: ${{ secrets.VAULT_TOKEN }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLEID }}
          secretId: ${{ secrets.VAULT_SECRETID}}
          secrets: |
            secrets/creds/docker username | DOCKERHUB_USERNAME ;
            secrets/creds/docker password | DOCKERHUB_PASSWORD ;

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ steps.import-secrets.outputs.DOCKERHUB_USERNAME }}
          password: ${{ steps.import-secrets.outputs.DOCKERHUB_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2 

      # - name: Build and push
      #   uses: docker/build-push-action@v3
      #   with:
      #     context: .
      #     push: true
      #     tags: |
      #       ${{ secrets.ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.DOCKER_CONTAINER_NAME }}:${{ steps.version.outputs.VERSION }}
      #       ${{ secrets.ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.DOCKER_CONTAINER_NAME }}:latest
      #     # cache-from: type=registry,ref=${{ secrets.ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.DOCKER_CONTAINER_NAME }}:latest
      #     cache-to: type=inline
      
      - uses: EndBug/add-and-commit@v7.0.0
        with:
          add: version
          message: "version updated with tag $new_version [skip ci]"
          author_name: "Ganesh Balimidi"
          author_email: "balimidi.ganesh@outlook.com"